pipeline {
    agent {
        kubernetes {
            yaml '''
            apiVersion: v1
            kind: Pod
            metadata:
              name: jenkins-agent-${env.BUILD_NUMBER}
            spec:
              containers:
              - name: node
                image: node:20
                command:
                  - cat
                tty: true
              - name: docker
                image: docker:latest
                command:
                - cat
                tty: true
                volumeMounts:
                - mountPath: "/var/run/docker.sock"
                  name: docker-socket
              - name: kubectl
                image: gcr.io/cloud-builders/kubectl
                command:
                - cat
                tty: true
              volumes:
              - name: docker-socket
                hostPath:
                  path: "/var/run/docker.sock"
            '''
        }
    }

    environment {
        DOCKER_CREDENTIALS_ID = 'dockerhub_access'
        DOCKER_IMAGE_NAME = 'jjjwww8802/frontend'
        DOCKERHUB_URL = 'https://index.docker.io/v1/'
        GITHUB_URL = 'git@github.com:beyond-sw-camp/be08-4th-DQ-OMOS.git'
        GITHUB_CREDENTIALS_ID = 'omos_access_ssh'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: "${GITHUB_CREDENTIALS_ID}", url: "${GITHUB_URL}"
            }
        }

        stage('Node.js Build') {
            steps {
                dir('Frontend') {
                    container('node') {
                        sh 'npm install'
                        sh 'npm run build'
                    }
                }
            }
        }

        stage('Docker Image Build & Push') {
            steps {
                dir('Frontend') {
                    container('docker') {
                        script {
                            sh 'docker logout'
                            withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                                sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                            }
                            sh "docker build --no-cache -t ${DOCKER_IMAGE_NAME}:latest ."
                            sh "docker push ${DOCKER_IMAGE_NAME}:latest"
                            sh 'docker logout'
                        }
                    }
                }
            }
        }

        stage('Kubernetes Deployment') {
            steps {
                container('kubectl') {
                    script {
                        sh "kubectl set image deploy frontend-deploy frontend=${DOCKER_IMAGE_NAME}:latest -n default"
                        sh "kubectl rollout restart deploy frontend-deploy -n default"
                    }
                }
            }
        }
    }

    post {
        success {
            withCredentials([string(credentialsId: 'discord-webhook', variable: 'DISCORD')]) {
                discordSend description: """
                제목 : ${currentBuild.displayName}
                결과 : ${currentBuild.result}
                실행 시간 : ${currentBuild.duration / 1000}s
                """,
                result: currentBuild.currentResult,
                title: "${env.JOB_NAME} : ${currentBuild.displayName} 성공",
                webhookURL: "${DISCORD}"
            }
        }
        failure {
            withCredentials([string(credentialsId: 'discord-webhook', variable: 'DISCORD')]) {
                discordSend description: """
                제목 : ${currentBuild.displayName}
                결과 : ${currentBuild.result}
                실행 시간 : ${currentBuild.duration / 1000}s
                """,
                result: currentBuild.currentResult,
                title: "${env.JOB_NAME} : ${currentBuild.displayName} 실패",
                webhookURL: "${DISCORD}"
            }
        }
    }
}
